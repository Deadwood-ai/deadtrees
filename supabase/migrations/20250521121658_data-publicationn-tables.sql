create table "public"."data_publication" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "doi" text,
    "title" text,
    "description" text,
    "user_id" uuid
);


alter table "public"."data_publication" enable row level security;

create table "public"."jt_data_publication_datasets" (
    "publication_id" bigint not null,
    "dataset_id" bigint not null
);


alter table "public"."jt_data_publication_datasets" enable row level security;

create table "public"."jt_data_publication_user_info" (
    "publication_id" bigint not null,
    "user_info_id" bigint not null
);


alter table "public"."jt_data_publication_user_info" enable row level security;

create table "public"."user_info" (
    "id" bigint generated by default as identity not null,
    "user" uuid,
    "created_at" timestamp with time zone not null default now(),
    "organisation" text,
    "orcid" text,
    "first_name" text,
    "last_name" text,
    "title" text
);


alter table "public"."user_info" enable row level security;

CREATE UNIQUE INDEX freidata_publications_pkey ON public.data_publication USING btree (id);

CREATE UNIQUE INDEX jt_data_publication_datasets_pkey ON public.jt_data_publication_datasets USING btree (publication_id, dataset_id);

CREATE UNIQUE INDEX jt_data_publication_user_info_pkey ON public.jt_data_publication_user_info USING btree (publication_id, user_info_id);

CREATE UNIQUE INDEX user_info_pkey ON public.user_info USING btree (id);

alter table "public"."data_publication" add constraint "freidata_publications_pkey" PRIMARY KEY using index "freidata_publications_pkey";

alter table "public"."jt_data_publication_datasets" add constraint "jt_data_publication_datasets_pkey" PRIMARY KEY using index "jt_data_publication_datasets_pkey";

alter table "public"."jt_data_publication_user_info" add constraint "jt_data_publication_user_info_pkey" PRIMARY KEY using index "jt_data_publication_user_info_pkey";

alter table "public"."user_info" add constraint "user_info_pkey" PRIMARY KEY using index "user_info_pkey";

alter table "public"."data_publication" add constraint "data_publication_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."data_publication" validate constraint "data_publication_user_id_fkey";

alter table "public"."jt_data_publication_datasets" add constraint "jt_data_publication_datasets_dataset_id_fkey" FOREIGN KEY (dataset_id) REFERENCES v2_datasets(id) not valid;

alter table "public"."jt_data_publication_datasets" validate constraint "jt_data_publication_datasets_dataset_id_fkey";

alter table "public"."jt_data_publication_datasets" add constraint "jt_data_publication_datasets_publication_id_fkey" FOREIGN KEY (publication_id) REFERENCES data_publication(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."jt_data_publication_datasets" validate constraint "jt_data_publication_datasets_publication_id_fkey";

alter table "public"."jt_data_publication_user_info" add constraint "jt_data_publication_user_info_publication_id_fkey" FOREIGN KEY (publication_id) REFERENCES data_publication(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."jt_data_publication_user_info" validate constraint "jt_data_publication_user_info_publication_id_fkey";

alter table "public"."jt_data_publication_user_info" add constraint "jt_data_publication_user_info_user_info_id_fkey" FOREIGN KEY (user_info_id) REFERENCES user_info(id) not valid;

alter table "public"."jt_data_publication_user_info" validate constraint "jt_data_publication_user_info_user_info_id_fkey";

alter table "public"."user_info" add constraint "user_info_user_fkey" FOREIGN KEY ("user") REFERENCES auth.users(id) not valid;

alter table "public"."user_info" validate constraint "user_info_user_fkey";

create or replace view "public"."v2_full_dataset_view" as  WITH ds AS (
         SELECT v2_datasets.id,
            v2_datasets.user_id,
            v2_datasets.created_at,
            v2_datasets.file_name,
            v2_datasets.license,
            v2_datasets.platform,
            v2_datasets.project_id,
            v2_datasets.authors,
            v2_datasets.aquisition_year,
            v2_datasets.aquisition_month,
            v2_datasets.aquisition_day,
            v2_datasets.additional_information,
            v2_datasets.data_access,
            v2_datasets.citation_doi
           FROM v2_datasets
          WHERE ((v2_datasets.data_access <> 'private'::access) OR (auth.uid() = v2_datasets.user_id) OR ((auth.jwt() ->> 'email'::text) = 'processor@deadtrees.earth'::text))
        ), ortho AS (
         SELECT v2_orthos.dataset_id,
            v2_orthos.ortho_file_name,
            v2_orthos.ortho_file_size,
            v2_orthos.bbox,
            v2_orthos.sha256,
            v2_orthos.ortho_upload_runtime
           FROM v2_orthos
        ), status AS (
         SELECT v2_statuses.dataset_id,
            v2_statuses.current_status,
            v2_statuses.is_upload_done,
            v2_statuses.is_ortho_done,
            v2_statuses.is_cog_done,
            v2_statuses.is_thumbnail_done,
            v2_statuses.is_deadwood_done,
            v2_statuses.is_forest_cover_done,
            v2_statuses.is_metadata_done,
            v2_statuses.is_audited,
            v2_statuses.has_error,
            v2_statuses.error_message
           FROM v2_statuses
        ), extra AS (
         SELECT ds_1.id AS dataset_id,
            cog.cog_file_name,
            cog.cog_path,
            cog.cog_file_size,
            thumb.thumbnail_file_name,
            thumb.thumbnail_path,
            (meta.metadata ->> 'gadm'::text) AS admin_metadata,
            (meta.metadata ->> 'biome'::text) AS biome_metadata
           FROM (((v2_datasets ds_1
             LEFT JOIN v2_cogs cog ON ((cog.dataset_id = ds_1.id)))
             LEFT JOIN v2_thumbnails thumb ON ((thumb.dataset_id = ds_1.id)))
             LEFT JOIN v2_metadata meta ON ((meta.dataset_id = ds_1.id)))
          WHERE ((ds_1.data_access <> 'private'::access) OR (auth.uid() = ds_1.user_id) OR ((auth.jwt() ->> 'email'::text) = 'processor@deadtrees.earth'::text))
        ), label_info AS (
         SELECT dataset.id AS dataset_id,
            (EXISTS ( SELECT 1
                   FROM v2_labels
                  WHERE ((v2_labels.dataset_id = dataset.id) AND (v2_labels.label_source = 'visual_interpretation'::"LabelSource") AND (v2_labels.label_data = 'deadwood'::"LabelData")))) AS has_labels,
            (EXISTS ( SELECT 1
                   FROM v2_labels
                  WHERE ((v2_labels.dataset_id = dataset.id) AND (v2_labels.label_source = 'model_prediction'::"LabelSource") AND (v2_labels.label_data = 'deadwood'::"LabelData")))) AS has_deadwood_prediction
           FROM v2_datasets dataset
          WHERE ((dataset.data_access <> 'private'::access) OR (auth.uid() = dataset.user_id) OR ((auth.jwt() ->> 'email'::text) = 'processor@deadtrees.earth'::text))
        ), freidata_doi AS (
         SELECT jt.dataset_id,
            dp.doi AS freidata_doi
           FROM (jt_data_publication_datasets jt
             JOIN data_publication dp ON ((dp.id = jt.publication_id)))
          WHERE (dp.doi IS NOT NULL)
        )
 SELECT ds.id,
    ds.user_id,
    ds.created_at,
    ds.file_name,
    ds.license,
    ds.platform,
    ds.project_id,
    ds.authors,
    ds.aquisition_year,
    ds.aquisition_month,
    ds.aquisition_day,
    ds.additional_information,
    ds.data_access,
    ds.citation_doi,
    ortho.ortho_file_name,
    ortho.ortho_file_size,
    ortho.bbox,
    ortho.sha256,
    status.current_status,
    status.is_upload_done,
    status.is_ortho_done,
    status.is_cog_done,
    status.is_thumbnail_done,
    status.is_deadwood_done,
    status.is_forest_cover_done,
    status.is_metadata_done,
    status.is_audited,
    status.has_error,
    status.error_message,
    extra.cog_file_name,
    extra.cog_path,
    extra.cog_file_size,
    extra.thumbnail_file_name,
    extra.thumbnail_path,
    ((extra.admin_metadata)::jsonb ->> 'admin_level_1'::text) AS admin_level_1,
    ((extra.admin_metadata)::jsonb ->> 'admin_level_2'::text) AS admin_level_2,
    ((extra.admin_metadata)::jsonb ->> 'admin_level_3'::text) AS admin_level_3,
    ((extra.biome_metadata)::jsonb ->> 'biome_name'::text) AS biome_name,
    label_info.has_labels,
    label_info.has_deadwood_prediction,
    freidata_doi.freidata_doi
   FROM (((((ds
     LEFT JOIN ortho ON ((ortho.dataset_id = ds.id)))
     LEFT JOIN status ON ((status.dataset_id = ds.id)))
     LEFT JOIN extra ON ((extra.dataset_id = ds.id)))
     LEFT JOIN label_info ON ((label_info.dataset_id = ds.id)))
     LEFT JOIN freidata_doi ON ((freidata_doi.dataset_id = ds.id)));


grant delete on table "public"."data_publication" to "anon";

grant insert on table "public"."data_publication" to "anon";

grant references on table "public"."data_publication" to "anon";

grant select on table "public"."data_publication" to "anon";

grant trigger on table "public"."data_publication" to "anon";

grant truncate on table "public"."data_publication" to "anon";

grant update on table "public"."data_publication" to "anon";

grant delete on table "public"."data_publication" to "authenticated";

grant insert on table "public"."data_publication" to "authenticated";

grant references on table "public"."data_publication" to "authenticated";

grant select on table "public"."data_publication" to "authenticated";

grant trigger on table "public"."data_publication" to "authenticated";

grant truncate on table "public"."data_publication" to "authenticated";

grant update on table "public"."data_publication" to "authenticated";

grant delete on table "public"."data_publication" to "service_role";

grant insert on table "public"."data_publication" to "service_role";

grant references on table "public"."data_publication" to "service_role";

grant select on table "public"."data_publication" to "service_role";

grant trigger on table "public"."data_publication" to "service_role";

grant truncate on table "public"."data_publication" to "service_role";

grant update on table "public"."data_publication" to "service_role";

grant delete on table "public"."jt_data_publication_datasets" to "anon";

grant insert on table "public"."jt_data_publication_datasets" to "anon";

grant references on table "public"."jt_data_publication_datasets" to "anon";

grant select on table "public"."jt_data_publication_datasets" to "anon";

grant trigger on table "public"."jt_data_publication_datasets" to "anon";

grant truncate on table "public"."jt_data_publication_datasets" to "anon";

grant update on table "public"."jt_data_publication_datasets" to "anon";

grant delete on table "public"."jt_data_publication_datasets" to "authenticated";

grant insert on table "public"."jt_data_publication_datasets" to "authenticated";

grant references on table "public"."jt_data_publication_datasets" to "authenticated";

grant select on table "public"."jt_data_publication_datasets" to "authenticated";

grant trigger on table "public"."jt_data_publication_datasets" to "authenticated";

grant truncate on table "public"."jt_data_publication_datasets" to "authenticated";

grant update on table "public"."jt_data_publication_datasets" to "authenticated";

grant delete on table "public"."jt_data_publication_datasets" to "service_role";

grant insert on table "public"."jt_data_publication_datasets" to "service_role";

grant references on table "public"."jt_data_publication_datasets" to "service_role";

grant select on table "public"."jt_data_publication_datasets" to "service_role";

grant trigger on table "public"."jt_data_publication_datasets" to "service_role";

grant truncate on table "public"."jt_data_publication_datasets" to "service_role";

grant update on table "public"."jt_data_publication_datasets" to "service_role";

grant delete on table "public"."jt_data_publication_user_info" to "anon";

grant insert on table "public"."jt_data_publication_user_info" to "anon";

grant references on table "public"."jt_data_publication_user_info" to "anon";

grant select on table "public"."jt_data_publication_user_info" to "anon";

grant trigger on table "public"."jt_data_publication_user_info" to "anon";

grant truncate on table "public"."jt_data_publication_user_info" to "anon";

grant update on table "public"."jt_data_publication_user_info" to "anon";

grant delete on table "public"."jt_data_publication_user_info" to "authenticated";

grant insert on table "public"."jt_data_publication_user_info" to "authenticated";

grant references on table "public"."jt_data_publication_user_info" to "authenticated";

grant select on table "public"."jt_data_publication_user_info" to "authenticated";

grant trigger on table "public"."jt_data_publication_user_info" to "authenticated";

grant truncate on table "public"."jt_data_publication_user_info" to "authenticated";

grant update on table "public"."jt_data_publication_user_info" to "authenticated";

grant delete on table "public"."jt_data_publication_user_info" to "service_role";

grant insert on table "public"."jt_data_publication_user_info" to "service_role";

grant references on table "public"."jt_data_publication_user_info" to "service_role";

grant select on table "public"."jt_data_publication_user_info" to "service_role";

grant trigger on table "public"."jt_data_publication_user_info" to "service_role";

grant truncate on table "public"."jt_data_publication_user_info" to "service_role";

grant update on table "public"."jt_data_publication_user_info" to "service_role";

grant delete on table "public"."user_info" to "anon";

grant insert on table "public"."user_info" to "anon";

grant references on table "public"."user_info" to "anon";

grant select on table "public"."user_info" to "anon";

grant trigger on table "public"."user_info" to "anon";

grant truncate on table "public"."user_info" to "anon";

grant update on table "public"."user_info" to "anon";

grant delete on table "public"."user_info" to "authenticated";

grant insert on table "public"."user_info" to "authenticated";

grant references on table "public"."user_info" to "authenticated";

grant select on table "public"."user_info" to "authenticated";

grant trigger on table "public"."user_info" to "authenticated";

grant truncate on table "public"."user_info" to "authenticated";

grant update on table "public"."user_info" to "authenticated";

grant delete on table "public"."user_info" to "service_role";

grant insert on table "public"."user_info" to "service_role";

grant references on table "public"."user_info" to "service_role";

grant select on table "public"."user_info" to "service_role";

grant trigger on table "public"."user_info" to "service_role";

grant truncate on table "public"."user_info" to "service_role";

grant update on table "public"."user_info" to "service_role";

create policy "Enable all for authenticated users only"
on "public"."data_publication"
as permissive
for all
to public
using (true);


create policy "Enable read access for all users"
on "public"."data_publication"
as permissive
for select
to public
using (true);


create policy "Enable all for authenticated users only"
on "public"."jt_data_publication_datasets"
as permissive
for all
to authenticated
using (true);


create policy "Enable read access for all users"
on "public"."jt_data_publication_datasets"
as permissive
for select
to public
using (true);


create policy "Enable all for authenticated users only"
on "public"."jt_data_publication_user_info"
as permissive
for all
to authenticated
using (true);


create policy "Enable read access for all users"
on "public"."jt_data_publication_user_info"
as permissive
for select
to public
using (true);


create policy "Enable all for authenticated users only"
on "public"."user_info"
as permissive
for all
to authenticated
using (true);


create policy "Enable read access for all users"
on "public"."user_info"
as permissive
for select
to public
using (true);



