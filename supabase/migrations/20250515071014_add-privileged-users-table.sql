create table "public"."privileged_users" (
    "id" bigint generated by default as identity not null,
    "user_id" uuid not null,
    "can_upload_private" boolean not null default true,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."privileged_users" enable row level security;

CREATE UNIQUE INDEX privileged_users_pkey ON public.privileged_users USING btree (id);

alter table "public"."privileged_users" add constraint "privileged_users_pkey" PRIMARY KEY using index "privileged_users_pkey";

alter table "public"."privileged_users" add constraint "privileged_users_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."privileged_users" validate constraint "privileged_users_user_id_fkey";

grant delete on table "public"."privileged_users" to "anon";

grant insert on table "public"."privileged_users" to "anon";

grant references on table "public"."privileged_users" to "anon";

grant select on table "public"."privileged_users" to "anon";

grant trigger on table "public"."privileged_users" to "anon";

grant truncate on table "public"."privileged_users" to "anon";

grant update on table "public"."privileged_users" to "anon";

grant delete on table "public"."privileged_users" to "authenticated";

grant insert on table "public"."privileged_users" to "authenticated";

grant references on table "public"."privileged_users" to "authenticated";

grant select on table "public"."privileged_users" to "authenticated";

grant trigger on table "public"."privileged_users" to "authenticated";

grant truncate on table "public"."privileged_users" to "authenticated";

grant update on table "public"."privileged_users" to "authenticated";

grant delete on table "public"."privileged_users" to "service_role";

grant insert on table "public"."privileged_users" to "service_role";

grant references on table "public"."privileged_users" to "service_role";

grant select on table "public"."privileged_users" to "service_role";

grant trigger on table "public"."privileged_users" to "service_role";

grant truncate on table "public"."privileged_users" to "service_role";

grant update on table "public"."privileged_users" to "service_role";

create policy "Enable delete for users based on user id or processor"
on "public"."privileged_users"
as permissive
for delete
to public
using (((auth.uid() = user_id) OR ((auth.jwt() ->> 'email'::text) = 'processor@deadtrees.earth'::text)));


create policy "Enable insert for authenticated users only"
on "public"."privileged_users"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users based on user id or processor"
on "public"."privileged_users"
as permissive
for select
to public
using (((auth.uid() = user_id) OR ((auth.jwt() ->> 'email'::text) = 'processor@deadtrees.earth'::text)));



