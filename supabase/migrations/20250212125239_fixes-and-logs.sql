create table "public"."v2_logs" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" text,
    "level" text,
    "message" text,
    "origin" text,
    "origin_line" integer,
    "user_id" uuid,
    "dataset_id" bigint,
    "backend_version" text,
    "extra" jsonb,
    "category" text
);


alter table "public"."v2_logs" enable row level security;

CREATE UNIQUE INDEX v2_logs_pkey ON public.v2_logs USING btree (id);

alter table "public"."v2_logs" add constraint "v2_logs_pkey" PRIMARY KEY using index "v2_logs_pkey";

alter table "public"."v2_logs" add constraint "public_logs_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."v2_logs" validate constraint "public_logs_user_id_fkey";

alter table "public"."v2_logs" add constraint "v2_logs_dataset_id_fkey" FOREIGN KEY (dataset_id) REFERENCES v2_datasets(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."v2_logs" validate constraint "v2_logs_dataset_id_fkey";

grant delete on table "public"."v2_logs" to "anon";

grant insert on table "public"."v2_logs" to "anon";

grant references on table "public"."v2_logs" to "anon";

grant select on table "public"."v2_logs" to "anon";

grant trigger on table "public"."v2_logs" to "anon";

grant truncate on table "public"."v2_logs" to "anon";

grant update on table "public"."v2_logs" to "anon";

grant delete on table "public"."v2_logs" to "authenticated";

grant insert on table "public"."v2_logs" to "authenticated";

grant references on table "public"."v2_logs" to "authenticated";

grant select on table "public"."v2_logs" to "authenticated";

grant trigger on table "public"."v2_logs" to "authenticated";

grant truncate on table "public"."v2_logs" to "authenticated";

grant update on table "public"."v2_logs" to "authenticated";

grant delete on table "public"."v2_logs" to "service_role";

grant insert on table "public"."v2_logs" to "service_role";

grant references on table "public"."v2_logs" to "service_role";

grant select on table "public"."v2_logs" to "service_role";

grant trigger on table "public"."v2_logs" to "service_role";

grant truncate on table "public"."v2_logs" to "service_role";

grant update on table "public"."v2_logs" to "service_role";

create policy "Enable insert for authenticated users only"
on "public"."v2_logs"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."v2_logs"
as permissive
for select
to public
using (true);


create policy "Enable delete for users based on email"
on "public"."v2_queue"
as permissive
for delete
to public
using (((auth.jwt() ->> 'email'::text) = 'processor@deadtrees.earth'::text));



