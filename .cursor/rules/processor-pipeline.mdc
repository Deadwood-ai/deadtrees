---
alwaysApply: true
---

## 🚀 **Quick Reference: Local File Caching**

**CRITICAL:** `processor/src/utils/ssh.py` implements a skip-if-exists mechanism:

```python
def pull_file_from_storage_server(remote_file_path, local_file_path, token, dataset_id):
    if os.path.exists(local_file_path):
        return  # Skip SSH transfer - reuse local file
    # ... proceed with SSH pull
```

**Why this matters:**
- `process_geotiff` creates **tiled** ortho locally at `/data/processing_dir/{dataset_id}_ortho.tif`
- All downstream tasks (COG, thumbnail, deadwood, treecover) call `pull_file_from_storage_server()`
- File exists → SSH skipped → **tiled** version reused ✅
- Prevents "Chunk and warp failed" errors in treecover (needs tiled input for GDAL reprojection)

**Enables:**
1. ✅ Efficient processing (no redundant 7GB+ transfers per task)
2. ✅ Independent task execution (tasks can run standalone if file exists)
3. ✅ Correct file usage (tiled version, not untiled original from storage)

---

## 🔧 **Processing Task Details**

### 1. GeoTIFF Standardization (`process_geotiff.py`)

**Purpose:** Convert uploaded ortho to standardized tiled format

**Actions:**
- Pulls original from `/data/archive/XXXX_ortho.tif`
- Creates standardized version with `standardise_geotiff()`:
  - Converts to 8-bit with auto-scaling
  - Creates proper alpha channel
  - **Tiles the output** (`TILED=YES`)
  - Handles nodata values
  - Reprojects if needed
- Saves metadata to `v2_orthos_processed`
- **Keeps standardized file locally** for next tasks
- Does NOT push back to storage

**Key Function:** `processor/src/geotiff/standardise_geotiff.py`

### 2. COG Generation (`process_cog.py`)

**Purpose:** Create web-optimized GeoTIFF

**Actions:**
- Uses local standardized ortho (from previous step)
- Creates COG with:
  - Proper tiling (256×256 blocks)
  - Compression (JPEG/DEFLATE)
  - Overviews for zoom levels
- Pushes COG to `/data/cogs/`
- Saves metadata to `v2_cogs`

### 3. Thumbnail Generation (`process_thumbnail.py`)

**Purpose:** Create preview image

**Actions:**
- Uses local standardized ortho
- Generates thumbnail (max 512×512)
- Pushes to `/data/thumbnails/`
- Saves metadata to `v2_thumbnails`

### 4. Segmentation Tasks

**Deadwood (`process_deadwood_segmentation.py`):**
- Uses local standardized ortho
- Runs SegFormer model
- Saves geometries to `v2_deadwood_geometries`

**Tree Cover (`process_treecover_segmentation.py`):**
- Uses local standardized ortho
- Reprojects to EPSG:3395 for TCD
- Runs TCD Pipeline in container
- Saves geometries to `v2_forest_cover_geometries`

---

## 🗄️ **Database Tables**

### File Metadata Tables

| Table | Purpose | Key Fields |
|-------|---------|-----------|
| `v2_orthos` | Original ortho metadata | `ortho_file_size` (MB), `ortho_info`, `bbox` |
| `v2_orthos_processed` | Standardized ortho metadata | `file_name`, `file_size` (MB), `ortho_info` |
| `v2_cogs` | COG metadata | `cog_file_size` (MB), `cog_info` |
| `v2_thumbnails` | Thumbnail metadata | `thumbnail_file_size` (bytes) |

**⚠️ File Size Units:**
- `ortho_file_size` and `cog_file_size` stored in **MB** (not bytes!)
- Example: `7366` = 7,366 MB ≈ 7.2 GB

### Status Tracking

| Table | Purpose |
|-------|---------|
| `v2_statuses` | Processing stage completion flags |
| `v2_queue` | Pending tasks with priority |
| `v2_logs` | Processing logs with timestamps |

---

## 🎯 **Key Architectural Decisions**

### Why Local Processing?

1. **Performance:** Avoid multiple SSH transfers of large files
2. **Consistency:** All tasks use same standardized input
3. **Efficiency:** Standardization happens once, used by all downstream tasks
4. **Storage:** Only push final outputs (COG, thumbnail) to storage

### Why Keep Original?

1. **Reproducibility:** Can reprocess from original
2. **Debugging:** Compare original vs processed
3. **Audit:** Preserve what user uploaded
4. **Flexibility:** Future processing improvements don't need re-upload

### File Tiling Strategy

**Problem:** Large untiled GeoTIFFs (multi-gigapixel) cause:
- GDAL "Chunk and warp failed" errors
- Memory exhaustion
- Slow processing

**Solution:** `standardise_geotiff()` creates tiled output
- Blocksize: 512×512 (default for GDAL commands)
- Compression: DEFLATE
- All downstream tasks benefit from tiled format

### Local File Caching (SSH Skip-if-Exists)

**Implementation:** `processor/src/utils/ssh.py` - `pull_file_from_storage_server()` (lines 14-19)

**Mechanism:**
```python
if os.path.exists(local_file_path):
    logger.info(f'File already exists locally at: {local_file_path}')
    return  # Skip SSH transfer entirely
```

**Benefits:**
1. **Preserves Standardized Files:** Once `process_geotiff` creates the tiled ortho locally, all downstream tasks (COG, thumbnail, deadwood, treecover) reuse it without overwriting
2. **Performance:** Avoids redundant 7GB+ file transfers for each task
3. **Independent Execution:** Each processing task can run standalone - if the file exists locally, no SSH needed
4. **Prevents "Chunk and warp failed":** Ensures treecover segmentation uses the tiled version, not the untiled original from storage

**Behavior in Sequential Pipeline:**
```
1. process_geotiff: Pull raw → Create processed at /data/processing_dir/id_ortho.tif
2. process_cog: Try pull → File exists → Skip SSH → Use processed ✅
3. process_thumbnail: Try pull → File exists → Skip SSH → Use processed ✅
4. process_deadwood: Try pull → File exists → Skip SSH → Use processed ✅
5. process_treecover: Try pull → File exists → Skip SSH → Use processed ✅
```

**Behavior for Independent Runs:**
- If processing task runs alone and file doesn't exist: Pull from storage
- If file exists from previous run: Skip SSH and reuse local file
- Enables retrying individual tasks without re-downloading large files

**⚠️ Critical:** This mechanism is why standardized tiled files work correctly despite `process_geotiff` not pushing them back to storage. The tiled file persists locally and all subsequent tasks in the same pipeline run (or retry) use it.

---

## 🚨 **Common Issues**

### Issue: "Chunk and warp failed" in TCD

**Root Cause:** Original ortho is untiled

**Why It Happens:**
1. User uploads untiled GeoTIFF
2. Stored at `/data/archive/XXXX_ortho.tif` (untiled)
3. `standardise_geotiff()` creates tiled version locally
4. GDAL's warp operations (used by treecover reprojection) fail on large untiled files

**Solution (Implemented):**
- `ssh.py` now checks if file exists locally before pulling (lines 14-19)
- Treecover segmentation uses the tiled standardized file created by `process_geotiff`
- No longer overwrites local tiled file with untiled original from storage

**If Error Still Occurs:**
- Dataset was processed before the ssh.py fix was deployed
- Reprocess the dataset: `curl -X PUT /api/v1/datasets/{id}/process -d '{"task_types": ["treecover"]}'`
- Cleanup orphaned volumes: `docker volume rm tcd_volume_{dataset_id}`

**Check Tiling Status:**
```sql
-- Check original (in storage)
SELECT ortho_info->'Profile'->>'Tiled' as is_tiled
FROM v2_orthos WHERE dataset_id = ?;

-- Check standardized (should always be tiled)
SELECT ortho_info->'Profile'->>'Tiled' as is_tiled
FROM v2_orthos_processed WHERE dataset_id = ?;
```

### Issue: File Size Confusion

**Problem:** Database shows tiny file sizes

**Reality:** Values are in MB, not bytes
- `ortho_file_size: 7366` = 7.2 GB ✅
- Not 7 KB ❌

**Verify:** SSH to storage and `ls -lh /data/archive/XXXX_ortho.tif`

---

## 📊 **Processing Flow Diagram**

```
┌─────────────────┐
│  User Upload    │ (GeoTIFF or ZIP)
└────────┬────────┘
         ↓
    ┌────────┐
    │  ODM?  │ (if raw images)
    └───┬────┘
        ↓
┌────────────────────────┐
│ /data/archive/         │ ← Original stored here
│ XXXX_ortho.tif         │
└───────┬────────────────┘
        ↓ SSH pull
┌────────────────────────┐
│ Processor Container    │
│ ┌──────────────────┐   │
│ │ standardise_     │   │
│ │ geotiff()        │   │ Creates tiled version locally
│ │ (tiles, 8-bit)   │   │
│ └────────┬─────────┘   │
│          ↓             │
│  standardized.tif      │ ← Used by all tasks below
│          ↓             │
│    ┌────┴────┐         │
│    ↓         ↓         │
│  ┌───┐    ┌───┐       │
│  │COG│    │THB│       │
│  └─┬─┘    └─┬─┘       │
│    ↓ push   ↓ push    │
└────┼────────┼─────────┘
     ↓        ↓
┌──────────────────┐
│ /data/cogs/      │
│ /data/thumbnails/│
└──────────────────┘
```

---

## 🔍 **Debugging Checklist**

When investigating processor issues:

1. **Check processing order:** Which stage failed?
2. **Verify file exists:** Is ortho in `/data/archive/`?
3. **Check tiling:** Is original ortho tiled?
4. **Review logs:** What error occurred?
5. **Check metadata:** Is `v2_orthos_processed` populated?
6. **Local files:** Did standardization succeed?
7. **Downstream tasks:** Which tasks depend on standardized file?

---

## 📝 **Important Code Locations**

| Functionality | File |
|--------------|------|
| Pipeline orchestration | `processor/src/continuous_processor.py` |
| GeoTIFF standardization | `processor/src/process_geotiff.py` |
| Standardization logic | `processor/src/geotiff/standardise_geotiff.py` |
| COG generation | `processor/src/process_cog.py` |
| Thumbnail generation | `processor/src/process_thumbnail.py` |
| Metadata extraction | `processor/src/process_metadata.py` |
| Deadwood segmentation | `processor/src/process_deadwood_segmentation.py` |
| Tree cover segmentation | `processor/src/process_treecover_segmentation.py` |
| ODM processing | `processor/src/process_odm.py` |
