---
alwaysApply: true
---
# Development Workflow & Testing

## WHEN TO USE
- Setting up or managing the development environment
- Running tests or debugging test failures
- Working with CLI commands or container orchestration
- Troubleshooting development environment or data assets

## CORE PRINCIPLES
- CLI-first: always use `deadtrees` CLI for dev and tests; avoid calling pytest directly
- Real-data-first: prefer real datasets and fixtures over mocks for geospatial/util functions
- Functional programming: prefer functions over classes for business logic
- Sync tests only: test functions must be synchronous
- Containers as source of truth: run services inside Docker Compose
- Ask-first: if something is unclear, ask clarifying questions

## QUICK START
```bash
# 1) Activate venv (local tools) — if needed
source venv/bin/activate

# 2) Download assets and create symlinks
make download-assets
make symlinks

# 3) Start dev environment (test stack)
deadtrees dev start

# 4) Run tests (CLI-only)
deadtrees dev test api
deadtrees dev test processor

# 5) Debug a specific test file
deadtrees dev debug api --test-path=api/tests/routers/test_download.py
# or
deadtrees dev debug processor --test-path=processor/tests/test_process_cog.py

# 6) Run continuous processor (dev loop)
deadtrees dev run-dev
```

## CONTAINER SERVICES (test stack)
- api-test: HTTP 8017, debug 5679
- processor-test: debug 5678 (GPU)
- nginx: HTTP 8080, SSH 2222 (test reverse proxy)
- CLI debugging (local): default 5680

## PORTS & ENDPOINTS
- Nginx test endpoints:
  - `http://localhost:8080/api/v1/` (FastAPI docs at `/docs`)
  - `http://localhost:8080/cogs/v1/`
  - `http://localhost:8080/thumbnails/v1/`
  - `http://localhost:8080/downloads/v1/`
- API test service: 8017 (internal health checks)
- Supabase (local): typically `http://host.docker.internal:54321` for API/pooler, studio commonly on 54323 (verify current local setup)

## TESTING PATTERNS
- Sync-only tests: `def test_*():` (no `async def`, no `@pytest.mark.asyncio`)
- Prefer function-based tests. Note: legacy class-based tests exist; avoid adding new ones
- Use real coordinates and assets for geospatial utilities
- Mark slow suites: `@pytest.mark.slow`, `--include-comprehensive` optional flag

## ESSENTIAL COMMANDS
```bash
# Environment management
deadtrees dev start                    # Start test stack
deadtrees dev stop                     # Stop test stack
deadtrees dev start --force-rebuild    # Force rebuild containers

# Testing (CLI-only)
deadtrees dev test api
deadtrees dev test processor

deadtrees dev debug api --test-path=api/tests/routers/test_download.py
deadtrees dev debug processor --test-path=processor/tests/test_process_cog.py

# Dev loop (sets up test users; runs processor continuously)
deadtrees dev run-dev

# Database reset (local)
supabase db reset

# Assets
make download-assets
make symlinks
```

## DATA & ASSETS
- Use `make download-assets` to fetch test GeoTIFFs, models, and GADM
- Key assets (default paths; see settings):
  - GADM: `assets/gadm/gadm_410.gpkg`
  - Phenology Zarr: `assets/pheno/modispheno_aggregated_normalized.zarr/`
  - Biome: `assets/biom/terres_ecosystems.gpkg`
  - Segmentation model: `assets/models/segformer_b5_full_epoch_100.safetensors`

## TROUBLESHOOTING
- Missing dependencies after rebuild → `deadtrees dev start --force-rebuild`
- Paths wrong in tests → use `shared.settings.settings.base_path` and derived paths
- GPU/unavailable → ensure NVIDIA runtime and device mounts in compose; check driver versions
- DB issues (prod) → use MCP tools; for local use `supabase db reset`

## ANTI-PATTERNS
- Do not run `pytest` directly in containers; use CLI wrappers
- Do not introduce async tests
- Avoid class-based tests; prefer functions (existing classes are legacy)
- Do not hardcode absolute file paths; derive from `shared.settings.settings`

## NOTES
- If any step or assumption is unclear, ask questions before proceeding
- Never commit on behalf of the user; request approval for git operations
