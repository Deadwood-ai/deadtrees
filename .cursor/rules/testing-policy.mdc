---
alwaysApply: true
---

# Testing Policy

## WHEN TO USE
- Writing, running, or reviewing tests

## Requirements
- All tests should be synchronous (no `async def`, no `@pytest.mark.asyncio`)
- Prefer function-based tests (no test classes for new tests)
- Use real data and fixtures for geospatial/utility functions
- Use `deadtrees` CLI to run tests; do not run `pytest` directly in containers

## Current Exceptions
- Some legacy class-based tests exist in `processor/tests/**`
- Do not add new class-based tests; refactors can gradually migrate existing ones

## Commands
```bash
deadtrees dev test api
deadtrees dev test processor
deadtrees dev debug api --test-path=...
deadtrees dev debug processor --test-path=...
```

## Notes
- If a test requires external data, verify assets via `make download-assets`
- If a test policy conflict arises, ask for guidance before changing patterns# Testing Policy

## WHEN TO USE
- Writing, running, or reviewing tests

## Requirements
- All tests should be synchronous (no `async def`, no `@pytest.mark.asyncio`)
- Prefer function-based tests (no test classes for new tests)
- Use real data and fixtures for geospatial/utility functions
- Use `deadtrees` CLI to run tests; do not run `pytest` directly in containers

## Current Exceptions
- Some legacy class-based tests exist in `processor/tests/**`
- Do not add new class-based tests; refactors can gradually migrate existing ones

## Commands
```bash
deadtrees dev test api
deadtrees dev test processor
deadtrees dev debug api --test-path=...
deadtrees dev debug processor --test-path=...
```

## Notes
- If a test requires external data, verify assets via `make download-assets`
- If a test policy conflict arises, ask for guidance before changing patterns