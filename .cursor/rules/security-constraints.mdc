---
alwaysApply: true
---

# Security Constraints & Access Control

## CRITICAL: Remote Access Rules

### ❌ **NEVER** Without User Consent
1. **SSH into any machine**
   - Do NOT run `ssh` commands to remote servers
   - Do NOT attempt to log into production or staging machines
   - Do NOT access remote hosts for debugging or inspection
   
2. **Direct database connections**
   - Do NOT use raw database connection strings
   - Do NOT bypass MCP tools for database access
   - Do NOT use `psql`, database clients, or direct SQL drivers

### ✅ **ALWAYS** Use Approved Tools

#### Database Access: MCP Tools Only
All database operations MUST use MCP tools:

**Available MCP Tools:**
- `mcp_deadtrees-prod_list_schemas` - List database schemas
- `mcp_deadtrees-prod_list_objects` - List tables, views, sequences, extensions
- `mcp_deadtrees-prod_get_object_details` - Show table/view structure
- `mcp_deadtrees-prod_execute_sql` - Execute read-only SQL queries
- `mcp_deadtrees-prod_explain_query` - Analyze query execution plans
- `mcp_deadtrees-prod_analyze_workload_indexes` - Index recommendations
- `mcp_deadtrees-prod_analyze_query_indexes` - Query-specific index analysis
- `mcp_deadtrees-prod_analyze_db_health` - Database health checks
- `mcp_deadtrees-prod_get_top_queries` - Performance query analysis

**Example (Correct):**
```
mcp_deadtrees-prod_execute_sql:
  sql: "SELECT * FROM v2_datasets WHERE id = 6166;"
```

**Example (FORBIDDEN):**
```bash
# ❌ NEVER DO THIS
ssh user@production-server "psql -d deadtrees -c 'SELECT * FROM v2_datasets'"
psql postgresql://user:pass@host/db
```

#### Remote Machine Access: User Permission Required

**Before any SSH command:**
1. Explicitly ask user: "May I SSH into [machine] to [specific reason]?"
2. Wait for explicit approval
3. Only proceed if user confirms

**Example (Correct):**
```
Agent: "I need to check if the processor container is running. 
May I SSH into the production server (141.5.107.39) to run 'docker ps'?"

[Wait for user response]

User: "Yes, go ahead"

[Only then execute SSH command]
```

#### Local Operations: Always Allowed
These operations do NOT require permission:
- Reading local files in `/home/jj1049/dev/deadtrees`
- Running local commands (pytest, linters, grep, etc.)
- Using MCP tools (database access via MCP)
- Reading logs from local files
- Git operations on local repository

## Rationale

### Why MCP-Only for Database?
- **Audit trail**: All database queries are logged through MCP
- **Security**: MCP provides controlled, authenticated access
- **Read-only**: MCP tools prevent accidental destructive operations
- **Consistency**: Centralized access pattern for all agents

### Why User Consent for SSH?
- **Production safety**: Prevent accidental changes to live systems
- **Awareness**: User should know when remote systems are accessed
- **Intentional actions**: Reduces risk of automated mistakes
- **Debugging clarity**: User can track what was checked remotely

## Enforcement

If you find yourself about to:
1. Type `ssh` in a command → **STOP** and ask user first
2. Use direct database connection → **STOP** and use MCP instead
3. Need database access → Use `mcp_deadtrees-prod_execute_sql` or related tools

## Exceptions

There are NO exceptions to these rules. If MCP tools are unavailable or insufficient:
1. Report the limitation to the user
2. Ask how they would like to proceed
3. Do NOT work around the constraint

---

**Remember**: When in doubt, ask the user before accessing remote systems.
